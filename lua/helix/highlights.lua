local M = {}

local function hi(group, spec)
    vim.api.nvim_set_hl(0, group, spec)
end

local function li(source, target)
    vim.cmd("hi! link " .. source .. " " .. target)
end

function M.apply(p)
    hi("Normal",         { fg = p.lavender, bg = p.midnight })
    li("NormalNC",        "Normal")
    hi("Cursor",         { reverse = true })
    hi("TermCursor",     { reverse = true })
    hi("CursorLine",     { bg = p.bossanova })
    hi("CursorColumn",   { bg = p.bossanova })
    hi("ColorColumn",    { bg = p.bossanova })
    hi("LineNr",         { fg = p.comet, bg = p.midnight })
    hi("CursorLineNr",   { fg = p.lilac, bg = p.midnight })
    hi("SignColumn",     { fg = p.comet, bg = p.midnight })
    hi("WinSeparator",   { fg = p.comet, bg = p.midnight })
    li("VertSplit",       "WinSeparator")
    hi("MatchParen",     { fg = "#212121", bg = "#6C6999" })
    hi("Visual",         { bg = "#540099" })
    li("VisualNOS",       "Visual")
    hi("QuickFixLine",   { bg = "#634450" })
    hi("NormalFloat",    { fg = p.lavender, bg = p.revolver })
    hi("FloatBorder",    { fg = p.bossanova, bg = p.revolver })
    hi("FloatTitle",     { fg = p.lilac, bg = p.revolver, bold = true })
    hi("StatusLine",     { fg = p.lilac, bg = p.revolver })
    hi("StatusLineNC",   { fg = p.lavender, bg = p.revolver })
    hi("Directory",      { fg = p.lilac })
    hi("NonText",        { fg = p.comet })
    hi("Whitespace",     { fg = p.comet })

    hi("Pmenu",          { fg = p.lavender, bg = p.revolver })
    hi("PmenuSel",       { fg = p.revolver, bg = p.white })
    hi("PmenuSbar",      { bg = p.comet })
    hi("PmenuThumb",     { bg = p.lavender })

    hi("WarningMsg",     { fg = p.lightning })
    hi("ErrorMsg",       { fg = p.apricot })
    hi("MoreMsg",        { fg = p.delta })
    hi("Question",       { fg = p.delta })

    hi("DiffAdd",        { fg = "#35bf86" })
    hi("DiffDelete",     { fg = "#f22c86" })
    hi("DiffChange",     { fg = p.delta })
    hi("DiffText",       { fg = p.delta, bold = true })

    hi("DiagnosticError",        { fg = p.apricot })
    hi("DiagnosticWarn",         { fg = p.lightning })
    hi("DiagnosticInfo",         { fg = p.delta })
    hi("DiagnosticHint",         { fg = p.silver })
    hi("DiagnosticUnnecessary",  { fg = p.comet })
    hi("DiagnosticDeprecated",   { strikethrough = true })
    hi("DiagnosticUnderlineError", { undercurl = true, sp = p.apricot })
    hi("DiagnosticUnderlineWarn",  { undercurl = true, sp = p.lightning })
    hi("DiagnosticUnderlineInfo",  { undercurl = true, sp = p.delta })
    hi("DiagnosticUnderlineHint",  { undercurl = true, sp = p.silver })

    hi("Comment",        { fg = p.sirocco })
    hi("String",         { fg = p.silver })
    hi("Character",      { fg = p.silver })
    hi("Number",         { fg = p.chamois })
    hi("Boolean",        { fg = p.chamois })
    hi("Float",          { fg = p.chamois })
    hi("Identifier",     { fg = p.lavender })
    hi("Function",       { fg = p.white })
    hi("Statement",      { fg = p.almond })
    hi("Conditional",    { fg = p.almond })
    hi("Repeat",         { fg = p.almond })
    hi("Label",          { fg = p.honey })
    hi("Operator",       { fg = p.lilac })
    hi("Keyword",        { fg = p.almond })
    hi("Exception",      { fg = p.almond })
    hi("PreProc",        { fg = p.lilac })
    hi("Include",        { fg = p.lilac })
    hi("Define",         { fg = p.lilac })
    hi("Macro",          { fg = p.lilac })
    hi("PreCondit",      { fg = p.lilac })
    hi("Type",           { fg = p.white })
    hi("StorageClass",   { fg = p.white })
    hi("Structure",      { fg = p.white })
    hi("Typedef",        { fg = p.white })
    hi("Special",        { fg = p.honey })
    hi("SpecialChar",    { fg = p.honey })
    hi("Tag",            { fg = p.almond })
    hi("Delimiter",      { fg = p.lavender })
    hi("Underlined",     { fg = p.silver, underline = true })
    hi("Title",          { fg = p.lilac, bold = true })
    hi("Todo",           { fg = p.lightning, bold = true })

    -- Treesitter modern captures
    -- Do not set these to make language specific colors
    -- to shine through
    hi("@variable.parameter",       {})
    hi("@parameter",                {})
    hi("@lsp.type.parameter",       {})
    hi("@attribute",                { fg = p.lilac })
    hi("@keyword",                  { fg = p.almond })
    hi("@keyword.directive",        { fg = p.lilac })
    hi("@namespace",                { fg = p.lilac })
    hi("@punctuation",              { fg = p.lavender })
    hi("@punctuation.delimiter",    { fg = p.lavender })
    hi("@punctuation.bracket",      { fg = p.lavender })
    hi("@operator",                 { fg = p.lilac })
    hi("@special",                  { fg = p.honey })
    hi("@variable",                 { fg = p.lavender })
    hi("@variable.member",          { fg = p.white })
    hi("@property",                 { fg = p.white })
    hi("@field",                    { fg = p.white })
    hi("@property",                 { fg = p.white })
    hi("@field",                    { fg = p.white })
    hi("@variable.parameter.builtin",{ fg = p.mint })
    hi("@variable.builtin",         { fg = p.mint })
    hi("@type",                     { fg = p.white })
    hi("@type.builtin",             { fg = p.white })
    hi("@constructor",              { fg = p.lilac })
    hi("@function",                 { fg = p.white })
    hi("@function.macro",           { fg = p.lilac })
    hi("@function.builtin",         { fg = p.white })
    hi("@tag",                      { fg = p.almond })
    hi("@comment",                  { fg = p.sirocco })
    hi("@constant",                 { fg = p.white })
    hi("@constant.builtin",         { fg = p.white })
    hi("@string",                   { fg = p.silver })
    hi("@number",                   { fg = p.chamois })
    hi("@character.escape",         { fg = p.honey })
    hi("@string.escape",            { fg = p.honey })
    hi("@label",                    { fg = p.honey })
    hi("@markup.heading",           { fg = p.lilac, bold = true })
    hi("@markup.bold",              { bold = true })
    hi("@markup.italic",            { italic = true })
    hi("@markup.strikethrough",     { strikethrough = true })
    hi("@markup.link.url",          { fg = p.silver, underline = true })
    hi("@markup.link.label",        { fg = p.almond })
    hi("@markup.raw",               { fg = p.almond })

    hi("IndentBlanklineChar",       { fg = p.comet })
    hi("IblIndent",                 { fg = p.comet })
    hi("IblScope",                  { fg = p.lilac })

    hi("TelescopeNormal",           { fg = p.lavender, bg = p.revolver })
    hi("TelescopeBorder",           { fg = p.bossanova, bg = p.revolver })
    hi("TelescopeTitle",            { fg = p.lilac, bg = p.revolver, bold = true })
    hi("TelescopeSelection",        { fg = p.revolver, bg = p.white })
    hi("TelescopeSelectionCaret",   { fg = p.revolver, bg = p.white })
    hi("TelescopeMatching",         { fg = p.lilac, bold = true })

    hi("CmpItemAbbr",               { fg = p.lavender })
    hi("CmpItemAbbrDeprecated",     { fg = p.sirocco, strikethrough = true })
    hi("CmpItemAbbrMatch",          { fg = p.lilac, bold = true })
    hi("CmpItemMenu",               { fg = p.comet })
    hi("CmpItemKind",               { fg = p.honey })
    hi("CmpItemKindFunction",       { fg = p.white })
    hi("CmpItemKindMethod",         { fg = p.white })
    hi("CmpItemKindConstructor",    { fg = p.lilac })
    hi("CmpItemKindVariable",       { fg = p.lavender })
    hi("CmpItemKindField",          { fg = p.white })
    hi("CmpItemKindClass",          { fg = p.white })
    hi("CmpItemKindInterface",      { fg = p.white })
    hi("CmpItemKindModule",         { fg = p.lilac })
    hi("CmpItemKindProperty",       { fg = p.white })
    hi("CmpItemKindUnit",           { fg = p.chamois })
    hi("CmpItemKindText",           { fg = p.lavender })
    hi("CmpItemKindSnippet",        { fg = p.delta })
    hi("CmpItemKindKeyword",        { fg = p.almond })
    hi("CmpItemKindFile",           { fg = p.lavender })
    hi("CmpItemKindFolder",         { fg = p.lilac })
    hi("CmpItemKindColor",          { fg = p.lightning })
    hi("CmpItemKindReference",      { fg = p.lilac })

    li("BlinkCmpMenu",              "Pmenu")
    li("BlinkCmpMenuBorder",        "FloatBorder")
    li("BlinkCmpMenuSelection",     "PmenuSel")
    hi("BlinkCmpLabel",             { fg = p.lavender })
    hi("BlinkCmpLabelDeprecated",   { fg = p.sirocco, strikethrough = true })
    hi("BlinkCmpLabelMatch",        { fg = p.lilac, bold = true })
    hi("BlinkCmpGhostText",         { fg = p.comet, italic = true })

    hi("Debug",                     { fg = "#634450" })
    hi("DapBreakpoint",             { fg = p.apricot })
    hi("DapStopped",                { fg = p.honey })

    hi("@lsp.type.namespace",       { fg = p.lilac })
    hi("@lsp.type.module",          { fg = p.lilac })
    hi("@lsp.type.class",           { fg = p.white })
    hi("@lsp.type.interface",       { fg = p.white })
    hi("@lsp.type.struct",          { fg = p.white })
    hi("@lsp.type.enum",            { fg = p.white })
    hi("@lsp.type.enumMember",      { fg = p.white })
    hi("@lsp.type.type",            { fg = p.white })
    hi("@lsp.type.typeParameter",   { fg = p.white })
    hi("@lsp.type.function",        { fg = p.white })
    hi("@lsp.type.method",          { fg = p.white })
    hi("@lsp.type.macro",           { fg = p.lilac })
    hi("@lsp.type.property",        { fg = p.white })
    hi("@lsp.type.field",           { fg = p.white })
    hi("@lsp.type.variable",        { fg = p.lavender })
    hi("@lsp.type.parameter",       {})

    -- Rust
    hi("@lifetime",                 { fg = p.honey })
    hi("@lifetime.rust",            { fg = p.honey })
    hi("@attribute.rust",           { fg = p.lilac })
    hi("@function.macro.rust",      { fg = p.lilac })
    hi("@namespace.rust",           { fg = p.lilac })
    hi("@type.builtin.rust",        { fg = p.white })
    hi("@property.rust",            { fg = p.white })
    hi("@field.rust",               { fg = p.white })
    hi("@variable.member.rust",     { fg = p.white })
    hi("@lsp.type.selfKeyword.rust",{ fg = p.mint })
    hi("@lsp.type.decorator.rust",  { fg = p.honey })

    -- Zig
    hi("@type.builtin.zig",         { fg = p.white })
    hi("@function.builtin.zig",     { fg = p.white })
    hi("@variable.builtin.zig",     { fg = p.mint })
    hi("@namespace.zig",            { fg = p.lilac })
    hi("@property.zig",             { fg = p.white })
    hi("@field.zig",                { fg = p.white })

    -- OCaml
    hi("@namespace.ocaml",          { fg = p.lilac })
    hi("@module.ocaml",             { fg = p.lilac })
    hi("@constructor.ocaml",        { fg = p.lilac })
    hi("@type.qualifier.ocaml",     { fg = p.lilac })
    hi("@punctuation.bracket.ocaml",{ fg = p.lavender })
    hi("@string.escape.ocaml",      { fg = p.honey })
    hi("@character.escape.ocaml",   { fg = p.honey })
    hi("@type.builtin.ocaml",       { fg = p.white })
    hi("@property.ocaml",           { fg = p.white })
    hi("@field.ocaml",              { fg = p.white })
    hi("@lsp.type.enumMember.ocaml",{ fg = p.lilac })
    hi("@lsp.type.interface.ocaml", { fg = p.lilac })

    -- Python
    hi("@variable.builtin.python",  { fg = p.mint })
    hi("@variable.parameter.builtin.python", { fg = p.mint })
    hi("@attribute.python",         { fg = p.lilac })
    hi("@function.builtin.python",  { fg = p.white })
    hi("@type.builtin.python",      { fg = p.white })
    hi("@property.python",          { fg = p.white })
    hi("@field.python",             { fg = p.white })
    hi("@lsp.type.method.python",   { fg = p.lilac })
    hi("@lsp.mod.readonly.python",  { fg = p.white })

    -- HTML
    hi("@tag",                      { fg = p.almond })
    hi("@tag.delimiter",            { fg = p.lavender })
    hi("@tag.attribute",            { fg = p.lilac })
    hi("@constant.css",             { fg = p.honey })

    -- JavaScript
    hi("@variable.builtin.javascript", { fg = p.mint })
    hi("@property.javascript",      { fg = p.white })
    hi("@field.javascript",         { fg = p.white })
    hi("@namespace.javascript",     { fg = p.lilac })
    hi("@constructor.javascript",   { fg = p.lilac })

    -- TypeScript / TSX / JSX
    hi("@module.typescript",        { fg = p.lavender })
    hi("@variable.builtin.typescript", { fg = p.mint })
    hi("@property.typescript",      { fg = p.white })
    hi("@field.typescript",         { fg = p.white })
    hi("@namespace.typescript",     { fg = p.lilac })
    hi("@constructor.typescript",   { fg = p.lilac })
    hi("@tag.tsx",                  { fg = p.almond })
    hi("@tag.attribute.tsx",        { fg = p.lilac })
    hi("@tag.delimiter.tsx",        { fg = p.lavender })
    hi("@tag.jsx",                  { fg = p.almond })
    hi("@tag.attribute.jsx",        { fg = p.lilac })
    hi("@tag.delimiter.jsx",        { fg = p.lavender })
end

return M
